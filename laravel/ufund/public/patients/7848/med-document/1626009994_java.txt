a)(1)
Definition of polymorphism is many forms.
polymorphism uses for the perform defrent task by using method with same name.
There are 2 type of polymorphism
    They are 
    1.compile time polymorphism/static polymorphism
    2.runtime polymorphism/dynamic polymorphism

1.compile time polymorphism/static polymorphism
    method overloading is example for the compile time polymorphism.
    below program is compile time polymorphism in java

    public class MethedOverLoading{

	    public static void main(String []args)
	    {
		    m(12.3f,45);
		    m(125);
	    }
	    static void m(int y)
	    {
		    System.out.println("hi i am from one parameter method ");
	    }
	    static void m(float x,int y)
	    {
		    System.out.println("hi i am from Method two parameers method");
	    }
    }

2.runtime polymorphism/dynamic polymorphism

    method overriding is example for the runtime polymorphism.
    The classes are related with each other from this type of polymorphism,
    below program is compile time polymorphism in java

    public class MethodOverRidding{
        public static void main(String[] args) {
            G g=new H();
		    g.m();

		    g=new I();
		    g.m();
        }
    }
    class G{
	    void m(){
		    System.out.println("G");
	    }
		
    }
    class H extends G{
	    void m(){
		    System.out.println("H");
    	}
    }
    class I extends H{
	    void m(){
		    System.out.println("I");
	    }
    }



b)(1)
*this
    The keyword "this" use for the shadowng and call for the constructor.
    constructor
    this() keyword use to called another constructor.

    ex:


public class A extends C{
	int a,b,c;
	A(){
		this(45,58);
		a=12;
		b=14;
		System.out.println("i am a.1="+a);
	}
		
	public A(int a,int b){
		this(45,59,63);
		this.a=a;
		this.b=b;
		System.out.println("i am a.2="+a+"\t"+b);
	}
	public static void main(String[] args){	
		new A(5,6);
	}
}
class B{
	B(){
		this(75,56);
		System.out.println("i am b.1");
	}
	B(int a,int b){
		this(62,58,96);
		System.out.println("i am b.2");
	}
}
class C extends B{
	C(){
		this(76,38);
		System.out.println("i am c.1");
	}
	C(int a,int b){
		this(86,96,36);
		System.out.println("i am c.2");
	}

	
}


*super key word

This keyword use to called variable and method of super class.
class Plant {
    String size = "big";

    void introduce() {
        System.out.println("Hi i am from super class.");
    }
}

class Fruit extends Plant {
    String size = "small";

    void introduce() {
        System.out.println("\n\nHi i am from sub class.");
    }

    void print() {
        super.introduce();
        System.out.println("print super class's size:" + super.size);

        introduce();
        System.out.println("print Fruit class's size:" + size);
    }
}

public class MainClass {

    public static void main(String[] args) {
        Fruit fr = new Fruit();

        fr.print();
    }
}


*super();
this is use to called constructor of super class.
ex:

class SuperClass {
    SuperClass() {
        System.out.println("This is super class");
    }
}

class Sub extends SuperClass {
    Sub() {
        super();
        System.out.println("sub class");
    }
}

public class MainClz {
    public static void main(String args[]) {
        Sub s = new Sub();
    }
}


abstraction is hiding some information to the user. and showing very important details to the user. 
ex: showing interfaces to the user.


when press moveon button,
    c.moveOn(false)---->c.moveon(true) (in main method)
when don't press moveBack button,
    c.moveback(false)---->c.moveback(false) (in main method)
when press turnLeft button,
    c.turnLeft(true)---->c.turnLeft(true) (in main method)
when press turnRight button,
    c.turnRight(false)---->c.turnRight(false) (in main method)